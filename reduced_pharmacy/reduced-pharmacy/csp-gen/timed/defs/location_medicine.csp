
--
-- RoboChart generator version 3.0.0.202408051513
-- Automatically generated on 14-01-2025 12:02:36
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module location_medicine
exports



module LocationMedicineFSM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_Finish|
	              NID_Initial|
	              NID_MoveToSection|
	              NID_FindMarker|
	              NID_MoveToPosRef|
	              NID_ConfirmMarker|
	              NID_Fail
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_attempts, set_attempts, setL_attempts, setR_attempts: core_nat
	channel get_validate_operation, set_validate_operation, setL_validate_operation, setR_validate_operation: core_boolean
	channel get_found_marker, set_found_marker, setL_found_marker, setR_found_marker: core_boolean
	channel get_confirmed_marker, set_confirmed_marker, setL_confirmed_marker, setR_confirmed_marker: core_boolean
	channel get_validate_database_b, set_validate_database_b, setL_validate_database_b, setR_validate_database_b: core_boolean
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel fail_move_to_section__: NIDS.InOut
	channel fail_move_to_section: InOut
	channel move_to_section__: NIDS.InOut.core_boolean
	channel move_to_section: InOut.core_boolean
	channel repeat_move_to_section__: NIDS.InOut.core_boolean
	channel repeat_move_to_section: InOut.core_boolean
	channel fail_find_marker__: NIDS.InOut
	channel fail_find_marker: InOut
	channel find_marker__: NIDS.InOut.core_boolean
	channel find_marker: InOut.core_boolean
	channel repeat_find_marker__: NIDS.InOut.core_boolean
	channel repeat_find_marker: InOut.core_boolean
	channel fail_move_to_pos_ref__: NIDS.InOut
	channel fail_move_to_pos_ref: InOut
	channel move_to_pos_ref__: NIDS.InOut.core_boolean
	channel move_to_pos_ref: InOut.core_boolean
	channel repeat_move_to_pos_ref__: NIDS.InOut.core_boolean
	channel repeat_move_to_pos_ref: InOut.core_boolean
	channel fail_confirm_marker__: NIDS.InOut
	channel fail_confirm_marker: InOut
	channel confirm_marker__: NIDS.InOut.core_boolean
	channel confirm_marker: InOut.core_boolean
	channel repeat_confirm_marker__: NIDS.InOut.core_boolean
	channel repeat_confirm_marker: InOut.core_boolean
	channel finish_with_fail__: NIDS.InOut
	channel finish_with_fail: InOut
	
	-- Declaring call and ret events for undefined operations
	channel check_movementCall
	channel move_to_poseCall
	
	enterSS = {|
	Finish::enter,
	Initial::enter,
	MoveToSection::enter,
	FindMarker::enter,
	MoveToPosRef::enter,
	ConfirmMarker::enter,
	Fail::enter
	|}
	
	enteredSS = 	{|
	Finish::entered,
	MoveToSection::entered,
	FindMarker::entered,
	MoveToPosRef::entered,
	ConfirmMarker::entered,
	Fail::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	fail_move_to_section,
		move_to_section,
		repeat_move_to_section,
		fail_find_marker,
		find_marker,
		repeat_find_marker,
		fail_move_to_pos_ref,
		move_to_pos_ref,
		repeat_move_to_pos_ref,
		fail_confirm_marker,
		confirm_marker,
		repeat_confirm_marker,
		finish_with_fail
	,	check_movementCall,
		move_to_poseCall
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_MoveToSection : core_clock_type 
	channel get_CLID_MoveToPosRef : core_clock_type 
	channel get_CLID_FindMarker : core_clock_type 
	channel get_CLID_Fail : core_clock_type 
	channel get_CLID_ConfirmMarker : core_clock_type 
	channel get_CLID_Finish : core_clock_type 
	--channel increment__
	
	CLID_MoveToSection_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_MoveToPosRef_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_FindMarker_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Fail_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_ConfirmMarker_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_Finish_clock_type(id__,
			          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	

		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Final state: Finish
		module Finish
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Initial: Initial
		module Initial
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: MoveToSection
		module MoveToSection
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: FindMarker
		module FindMarker
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: MoveToPosRef
		module MoveToPosRef
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: ConfirmMarker
		module ConfirmMarker
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: Fail
		module Fail
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_attempts!0 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= share__choice(true & (share__choice(set_attempts!0 -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__check_movement(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = EDeadline(check_movementCall,0)
		CALL__move_to_pose(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = EDeadline(move_to_poseCall,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful(id__,
							    const_location_medicine_LocationMedicineFSM_limit_attempts) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_location_medicine_LocationMedicineFSM_limit_attempts))
		)\sharedVarHide
		
		STM_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
		( 
			(
				(
					(IteratedStateful_VS_O(id__,
							    const_location_medicine_LocationMedicineFSM_limit_attempts) \ {terminate} ; share__choice(terminate -> SKIP))
				 	[[ share__ <- x__ | x__ <- {||} ]]
				)
			[| {share__} |]
			SKIP
			)
			[| union(sharedVarSync,{terminate}) |]
			dbisim(sharedVarMemory(id__,
					    const_location_medicine_LocationMedicineFSM_limit_attempts))
		)\sharedVarHide
		
		-- Transitions
		Transitions(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = ((let
			Trans = share__choice(get_found_marker?found_marker -> get_validate_database_b?validate_database_b -> get_attempts?attempts -> get_validate_operation?validate_operation -> get_confirmed_marker?confirmed_marker -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_Initial -> SKIP ;  ((SKIP ; MoveToSection::enter -> SKIP))))
				 [] dbisim((repeat_move_to_section__!NID_MoveToSection.in?validate_database_b:{validate_database_b|validate_database_b <- core_boolean, ((validate_database_b==false) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_validate_database_b!validate_database_b -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_attempts?attempts -> true & (share__choice(set_attempts!Plus(attempts, 1, core_nat) -> SKIP)))) ; MoveToSection::enter -> SKIP)))
				 [] dbisim((((validate_database_b==false) and (attempts>=const_location_medicine_LocationMedicineFSM_limit_attempts)))&(fail_move_to_section__!NID_MoveToSection.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Fail::enter -> SKIP)))
				 [] dbisim((move_to_section__!NID_MoveToSection.in?validate_database_b:{validate_database_b|validate_database_b <- core_boolean, ((validate_database_b==true) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_validate_database_b!validate_database_b -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_attempts!0 -> SKIP))) ; FindMarker::enter -> SKIP)))
				 [] dbisim((repeat_find_marker__!NID_FindMarker.in?found_marker:{found_marker|found_marker <- core_boolean, ((found_marker==false) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_found_marker!found_marker -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_attempts?attempts -> true & (share__choice(set_attempts!Plus(attempts, 1, core_nat) -> SKIP)))) ; FindMarker::enter -> SKIP)))
				 [] dbisim(((attempts>=const_location_medicine_LocationMedicineFSM_limit_attempts))&(fail_find_marker__!NID_FindMarker.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Fail::enter -> SKIP)))
				 [] dbisim((find_marker__!NID_FindMarker.in?found_marker:{found_marker|found_marker <- core_boolean, ((found_marker==true) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_found_marker!found_marker -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_attempts!0 -> SKIP))) ; MoveToPosRef::enter -> SKIP)))
				 [] dbisim((repeat_move_to_pos_ref__!NID_MoveToPosRef.in?validate_operation:{validate_operation|validate_operation <- core_boolean, ((validate_operation==false) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_validate_operation!validate_operation -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_attempts?attempts -> true & (share__choice(set_attempts!Plus(attempts, 1, core_nat) -> SKIP)))) ; MoveToPosRef::enter -> SKIP)))
				 [] dbisim((move_to_pos_ref__!NID_MoveToPosRef.in?validate_operation:{validate_operation|validate_operation <- core_boolean, ((validate_operation==true) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_validate_operation!validate_operation -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(true & (share__choice(set_attempts!0 -> SKIP))) ; ConfirmMarker::enter -> SKIP)))
				 [] dbisim((repeat_confirm_marker__!NID_ConfirmMarker.in?confirmed_marker:{confirmed_marker|confirmed_marker <- core_boolean, ((confirmed_marker==false) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_confirmed_marker!confirmed_marker -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(share__choice(get_attempts?attempts -> true & (share__choice(set_attempts!Plus(attempts, 1, core_nat) -> SKIP)))) ; ConfirmMarker::enter -> SKIP)))
				 [] dbisim(((attempts>=const_location_medicine_LocationMedicineFSM_limit_attempts))&(fail_confirm_marker__!NID_ConfirmMarker.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Fail::enter -> SKIP)))
				 [] dbisim((confirm_marker__!NID_ConfirmMarker.in?confirmed_marker:{confirmed_marker|confirmed_marker <- core_boolean, ((confirmed_marker==true) and (attempts<const_location_medicine_LocationMedicineFSM_limit_attempts))} -> share__choice(set_confirmed_marker!confirmed_marker -> SKIP) ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Finish::enter -> SKIP)))
				 [] dbisim(((attempts>=const_location_medicine_LocationMedicineFSM_limit_attempts))&(fail_move_to_pos_ref__!NID_MoveToPosRef.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Fail::enter -> SKIP)))
				 [] dbisim((true)&(finish_with_fail__!NID_Fail.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Finish::enter -> SKIP)))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((
			let
				finalNodesEntered = {|Finish::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					Finish::enter,
					Initial::enter,
					MoveToSection::enter,
					FindMarker::enter,
					MoveToPosRef::enter,
					ConfirmMarker::enter,
					Fail::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Initial,repeat_move_to_section__.NID_MoveToSection.in,fail_move_to_section__.NID_MoveToSection.in,move_to_section__.NID_MoveToSection.in,repeat_find_marker__.NID_FindMarker.in,fail_find_marker__.NID_FindMarker.in,find_marker__.NID_FindMarker.in,repeat_move_to_pos_ref__.NID_MoveToPosRef.in,move_to_pos_ref__.NID_MoveToPosRef.in,repeat_confirm_marker__.NID_ConfirmMarker.in,fail_confirm_marker__.NID_ConfirmMarker.in,confirm_marker__.NID_ConfirmMarker.in,fail_move_to_pos_ref__.NID_MoveToPosRef.in,finish_with_fail__.NID_Fail.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   Finish::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   Initial::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   MoveToSection::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   FindMarker::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   MoveToPosRef::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   ConfirmMarker::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   Fail::D__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Finish::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[MoveToSection::interrupt <- x__ | x__ <- {|interrupt,repeat_move_to_section__.NID_MoveToSection.in,fail_move_to_section__.NID_MoveToSection.in,move_to_section__.NID_MoveToSection.in|}]]
						 [[FindMarker::interrupt <- x__ | x__ <- {|interrupt,repeat_find_marker__.NID_FindMarker.in,fail_find_marker__.NID_FindMarker.in,find_marker__.NID_FindMarker.in|}]]
						 [[MoveToPosRef::interrupt <- x__ | x__ <- {|interrupt,repeat_move_to_pos_ref__.NID_MoveToPosRef.in,move_to_pos_ref__.NID_MoveToPosRef.in,fail_move_to_pos_ref__.NID_MoveToPosRef.in|}]]
						 [[ConfirmMarker::interrupt <- x__ | x__ <- {|interrupt,repeat_confirm_marker__.NID_ConfirmMarker.in,fail_confirm_marker__.NID_ConfirmMarker.in,confirm_marker__.NID_ConfirmMarker.in|}]]
						 [[Fail::interrupt <- x__ | x__ <- {|interrupt,finish_with_fail__.NID_Fail.in|}]]
						 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_found_marker,setR_validate_database_b,setR_validate_operation,setR_confirmed_marker |} ]] 
						  [[set_found_marker <- setL_found_marker,set_validate_database_b <- setL_validate_database_b,set_attempts <- setL_attempts,set_validate_operation <- setL_validate_operation,set_confirmed_marker <- setL_confirmed_marker]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_found_marker
						 			,setL_validate_database_b
						 			,setL_attempts
						 			,setL_validate_operation
						 			,setL_confirmed_marker
						 			,setR_found_marker
						 			 			,setR_validate_database_b
						 			 			,setR_validate_operation
						 			 			,setR_confirmed_marker
						 			|}) |]
						 ((Initial::enter -> Transitions(id__,
						 		    const_location_medicine_LocationMedicineFSM_limit_attempts))
						  [[ share__ <- x__ | x__ <- {| share__,setL_found_marker,setL_validate_database_b,setL_attempts,setL_validate_operation,setL_confirmed_marker |} ]]
						  [[set_found_marker <- setR_found_marker,set_validate_database_b <- setR_validate_database_b,set_validate_operation <- setR_validate_operation,set_confirmed_marker <- setR_confirmed_marker]]
						 )
						)[[setL_found_marker <- set_found_marker,setL_validate_database_b <- set_validate_database_b,setL_attempts <- set_attempts,setL_validate_operation <- set_validate_operation,setL_confirmed_marker <- set_confirmed_marker]]
						 [[setR_found_marker <- set_found_marker,setR_validate_database_b <- set_validate_database_b,setR_validate_operation <- set_validate_operation,setR_confirmed_marker <- set_confirmed_marker]]
						)
					)
					 \ hideSet)
					[[
						fail_move_to_section__.x____ <- fail_move_to_section,
						move_to_section__.x____ <- move_to_section,
						repeat_move_to_section__.x____ <- repeat_move_to_section,
						fail_find_marker__.x____ <- fail_find_marker,
						find_marker__.x____ <- find_marker,
						repeat_find_marker__.x____ <- repeat_find_marker,
						fail_move_to_pos_ref__.x____ <- fail_move_to_pos_ref,
						move_to_pos_ref__.x____ <- move_to_pos_ref,
						repeat_move_to_pos_ref__.x____ <- repeat_move_to_pos_ref,
						fail_confirm_marker__.x____ <- fail_confirm_marker,
						confirm_marker__.x____ <- confirm_marker,
						repeat_confirm_marker__.x____ <- repeat_confirm_marker,
						finish_with_fail__.x____ <- finish_with_fail
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_location_medicine_LocationMedicineFSM_limit_attempts)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveToSection,MoveToSection::entered,get_CLID_MoveToPosRef,MoveToPosRef::entered,get_CLID_FindMarker,FindMarker::entered,get_CLID_Fail,Fail::entered,get_CLID_ConfirmMarker,ConfirmMarker::entered|}
			 within
				(MachineBody(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)) \ union(stateClockSync,enteredSS)
			)
			)
		
		IteratedBehaviour(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveToSection,MoveToSection::entered,get_CLID_MoveToPosRef,MoveToPosRef::entered,get_CLID_FindMarker,FindMarker::entered,get_CLID_Fail,Fail::entered,get_CLID_ConfirmMarker,ConfirmMarker::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														MachineBody(id__,
																    const_location_medicine_LocationMedicineFSM_limit_attempts)
														[| {|get_CLID_ConfirmMarker,ConfirmMarker::entered,terminate|} |]
														dbisim(Clock_CLID_ConfirmMarker(id__,0,
																          const_location_medicine_LocationMedicineFSM_limit_attempts))
													)\{|get_CLID_ConfirmMarker|}
												)
												[| {|get_CLID_Fail,Fail::entered,terminate|} |]
												dbisim(Clock_CLID_Fail(id__,0,
														          const_location_medicine_LocationMedicineFSM_limit_attempts))
											)\{|get_CLID_Fail|}
										)
										[| {|get_CLID_FindMarker,FindMarker::entered,terminate|} |]
										dbisim(Clock_CLID_FindMarker(id__,0,
												          const_location_medicine_LocationMedicineFSM_limit_attempts))
									)\{|get_CLID_FindMarker|}
								)
								[| {|get_CLID_MoveToPosRef,MoveToPosRef::entered,terminate|} |]
								dbisim(Clock_CLID_MoveToPosRef(id__,0,
										          const_location_medicine_LocationMedicineFSM_limit_attempts))
							)\{|get_CLID_MoveToPosRef|}
						)
						[| {|get_CLID_MoveToSection,MoveToSection::entered,terminate|} |]
						dbisim(Clock_CLID_MoveToSection(id__,0,
								          const_location_medicine_LocationMedicineFSM_limit_attempts))
					)\{|get_CLID_MoveToSection|}
				)
				) \ union(stateClockSync,enteredSS)
			)
			)
		
		Stateful(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			((let
				getsetLocalChannels = {|get_attempts,set_attempts,
				get_validate_operation,set_validate_operation,
				get_found_marker,set_found_marker,
				get_confirmed_marker,set_confirmed_marker,
				get_validate_database_b,set_validate_database_b|}
				clockSync = {||}
			within
				(Behaviour(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_location_medicine_LocationMedicineFSM_limit_attempts) [| {terminate} |] Clocks(id__,
				 		          const_location_medicine_LocationMedicineFSM_limit_attempts))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour(id__,
															    const_location_medicine_LocationMedicineFSM_limit_attempts)
													[| {|get_validate_database_b,set_validate_database_b,terminate|} |]
													Memory_validate_database_b(true)
												)\{|get_validate_database_b,set_validate_database_b|}
											)
											[| {|get_confirmed_marker,set_confirmed_marker,terminate|} |]
											Memory_confirmed_marker(true)
										)\{|get_confirmed_marker,set_confirmed_marker|}
									)
									[| {|get_found_marker,set_found_marker,terminate|} |]
									Memory_found_marker(true)
								)\{|get_found_marker,set_found_marker|}
							)
							[| {|get_validate_operation,set_validate_operation,terminate|} |]
							Memory_validate_operation(true)
						)\{|get_validate_operation,set_validate_operation|}
					)
					[| {|get_attempts,set_attempts,terminate|} |]
					Memory_attempts(0)
				)\{|get_attempts,set_attempts|}
			)
			)
		
		-- Visible counterparts
		MachineBody_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((
			let
				finalNodesEntered = {|Finish::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					Finish::enter,
					Initial::enter,
					MoveToSection::enter,
					FindMarker::enter,
					MoveToPosRef::enter,
					ConfirmMarker::enter,
					Fail::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_Initial,repeat_move_to_section__.NID_MoveToSection.in,fail_move_to_section__.NID_MoveToSection.in,move_to_section__.NID_MoveToSection.in,repeat_find_marker__.NID_FindMarker.in,fail_find_marker__.NID_FindMarker.in,find_marker__.NID_FindMarker.in,repeat_move_to_pos_ref__.NID_MoveToPosRef.in,move_to_pos_ref__.NID_MoveToPosRef.in,repeat_confirm_marker__.NID_ConfirmMarker.in,fail_confirm_marker__.NID_ConfirmMarker.in,confirm_marker__.NID_ConfirmMarker.in,fail_move_to_pos_ref__.NID_MoveToPosRef.in,finish_with_fail__.NID_Fail.in|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   Finish::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   Initial::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   MoveToSection::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   FindMarker::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   MoveToPosRef::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   ConfirmMarker::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   [| { share__, terminate } |] (
						   Fail::VS_O__(id__,
						   		    const_location_medicine_LocationMedicineFSM_limit_attempts)
						   )
						   )
						   )
						   )
						   )
						   )
						 )
						 [[Finish::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[MoveToSection::interrupt <- x__ | x__ <- {|interrupt,repeat_move_to_section__.NID_MoveToSection.in,fail_move_to_section__.NID_MoveToSection.in,move_to_section__.NID_MoveToSection.in|}]]
						 [[FindMarker::interrupt <- x__ | x__ <- {|interrupt,repeat_find_marker__.NID_FindMarker.in,fail_find_marker__.NID_FindMarker.in,find_marker__.NID_FindMarker.in|}]]
						 [[MoveToPosRef::interrupt <- x__ | x__ <- {|interrupt,repeat_move_to_pos_ref__.NID_MoveToPosRef.in,move_to_pos_ref__.NID_MoveToPosRef.in,fail_move_to_pos_ref__.NID_MoveToPosRef.in|}]]
						 [[ConfirmMarker::interrupt <- x__ | x__ <- {|interrupt,repeat_confirm_marker__.NID_ConfirmMarker.in,fail_confirm_marker__.NID_ConfirmMarker.in,confirm_marker__.NID_ConfirmMarker.in|}]]
						 [[Fail::interrupt <- x__ | x__ <- {|interrupt,finish_with_fail__.NID_Fail.in|}]]
						 [[Initial::interrupt <- x__ | x__ <- {|internal__.NID_Initial|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__,setR_found_marker,setR_validate_database_b,setR_validate_operation,setR_confirmed_marker |} ]] 
						  [[set_found_marker <- setL_found_marker,set_validate_database_b <- setL_validate_database_b,set_attempts <- setL_attempts,set_validate_operation <- setL_validate_operation,set_confirmed_marker <- setL_confirmed_marker]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_found_marker
						 			,setL_validate_database_b
						 			,setL_attempts
						 			,setL_validate_operation
						 			,setL_confirmed_marker
						 			,setR_found_marker
						 			 			,setR_validate_database_b
						 			 			,setR_validate_operation
						 			 			,setR_confirmed_marker
						 			|}) |]
						 ((Initial::enter -> Transitions(id__,
						 		    const_location_medicine_LocationMedicineFSM_limit_attempts))
						  [[ share__ <- x__ | x__ <- {| share__,setL_found_marker,setL_validate_database_b,setL_attempts,setL_validate_operation,setL_confirmed_marker |} ]]
						  [[set_found_marker <- setR_found_marker,set_validate_database_b <- setR_validate_database_b,set_validate_operation <- setR_validate_operation,set_confirmed_marker <- setR_confirmed_marker]]
						 )
						)[[setL_found_marker <- set_found_marker,setL_validate_database_b <- set_validate_database_b,setL_attempts <- set_attempts,setL_validate_operation <- set_validate_operation,setL_confirmed_marker <- set_confirmed_marker]]
						 [[setR_found_marker <- set_found_marker,setR_validate_database_b <- set_validate_database_b,setR_validate_operation <- set_validate_operation,setR_confirmed_marker <- set_confirmed_marker]]
						)
					)
					 \ hideSet)
					[[
						fail_move_to_section__.x____ <- fail_move_to_section,
						move_to_section__.x____ <- move_to_section,
						repeat_move_to_section__.x____ <- repeat_move_to_section,
						fail_find_marker__.x____ <- fail_find_marker,
						find_marker__.x____ <- find_marker,
						repeat_find_marker__.x____ <- repeat_find_marker,
						fail_move_to_pos_ref__.x____ <- fail_move_to_pos_ref,
						move_to_pos_ref__.x____ <- move_to_pos_ref,
						repeat_move_to_pos_ref__.x____ <- repeat_move_to_pos_ref,
						fail_confirm_marker__.x____ <- fail_confirm_marker,
						confirm_marker__.x____ <- confirm_marker,
						repeat_confirm_marker__.x____ <- repeat_confirm_marker,
						finish_with_fail__.x____ <- finish_with_fail
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__,
				 		          const_location_medicine_LocationMedicineFSM_limit_attempts)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveToSection,MoveToSection::entered,get_CLID_MoveToPosRef,MoveToPosRef::entered,get_CLID_FindMarker,FindMarker::entered,get_CLID_Fail,Fail::entered,get_CLID_ConfirmMarker,ConfirmMarker::entered|}
			 within
				(MachineBody_VS_O(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		IteratedBehaviour_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((let
				stateClockSync = {|get_CLID_MoveToSection,MoveToSection::entered,get_CLID_MoveToPosRef,MoveToPosRef::entered,get_CLID_FindMarker,FindMarker::entered,get_CLID_Fail,Fail::entered,get_CLID_ConfirmMarker,ConfirmMarker::entered|}
			 within
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												dbisim(
													sbisim(
														MachineBody_VS_O(id__,
																    const_location_medicine_LocationMedicineFSM_limit_attempts)
														[| {|get_CLID_ConfirmMarker,ConfirmMarker::entered,terminate|} |]
														dbisim(Clock_CLID_ConfirmMarker(id__,0,
																          const_location_medicine_LocationMedicineFSM_limit_attempts))
													)\{|get_CLID_ConfirmMarker|}
												)
												[| {|get_CLID_Fail,Fail::entered,terminate|} |]
												dbisim(Clock_CLID_Fail(id__,0,
														          const_location_medicine_LocationMedicineFSM_limit_attempts))
											)\{|get_CLID_Fail|}
										)
										[| {|get_CLID_FindMarker,FindMarker::entered,terminate|} |]
										dbisim(Clock_CLID_FindMarker(id__,0,
												          const_location_medicine_LocationMedicineFSM_limit_attempts))
									)\{|get_CLID_FindMarker|}
								)
								[| {|get_CLID_MoveToPosRef,MoveToPosRef::entered,terminate|} |]
								dbisim(Clock_CLID_MoveToPosRef(id__,0,
										          const_location_medicine_LocationMedicineFSM_limit_attempts))
							)\{|get_CLID_MoveToPosRef|}
						)
						[| {|get_CLID_MoveToSection,MoveToSection::entered,terminate|} |]
						dbisim(Clock_CLID_MoveToSection(id__,0,
								          const_location_medicine_LocationMedicineFSM_limit_attempts))
					)\{|get_CLID_MoveToSection|}
				)
				) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		Stateful_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			dbisim((let
				getsetLocalChannels = {|get_attempts,set_attempts,
				get_validate_operation,set_validate_operation,
				get_found_marker,set_found_marker,
				get_confirmed_marker,set_confirmed_marker,
				get_validate_database_b,set_validate_database_b|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__,
						    const_location_medicine_LocationMedicineFSM_limit_attempts) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__,
				 		    const_location_medicine_LocationMedicineFSM_limit_attempts) [| {terminate} |] Clocks(id__,
				 		          const_location_medicine_LocationMedicineFSM_limit_attempts))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		IteratedStateful_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) =
			(dbisim(
				sbisim(
					dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													IteratedBehaviour_VS_O(id__,
															    const_location_medicine_LocationMedicineFSM_limit_attempts)
													[| {|get_validate_database_b,set_validate_database_b,terminate|} |]
													Memory_validate_database_b(true)
												)\{|get_validate_database_b,set_validate_database_b|}
											)
											[| {|get_confirmed_marker,set_confirmed_marker,terminate|} |]
											Memory_confirmed_marker(true)
										)\{|get_confirmed_marker,set_confirmed_marker|}
									)
									[| {|get_found_marker,set_found_marker,terminate|} |]
									Memory_found_marker(true)
								)\{|get_found_marker,set_found_marker|}
							)
							[| {|get_validate_operation,set_validate_operation,terminate|} |]
							Memory_validate_operation(true)
						)\{|get_validate_operation,set_validate_operation|}
					)
					[| {|get_attempts,set_attempts,terminate|} |]
					Memory_attempts(0)
				)\{|get_attempts,set_attempts|}
			)
			)
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_attempts(attempts) =
			get_attempts!attempts -> Memory_attempts(attempts)
			[]
			set_attempts?x__ -> Memory_attempts(x__)
			[]
			terminate -> SKIP
		Memory_validate_operation(validate_operation) =
			get_validate_operation!validate_operation -> Memory_validate_operation(validate_operation)
			[]
			set_validate_operation?x__ -> Memory_validate_operation(x__)
			[]
			terminate -> SKIP
		Memory_found_marker(found_marker) =
			get_found_marker!found_marker -> Memory_found_marker(found_marker)
			[]
			set_found_marker?x__ -> Memory_found_marker(x__)
			[]
			terminate -> SKIP
		Memory_confirmed_marker(confirmed_marker) =
			get_confirmed_marker!confirmed_marker -> Memory_confirmed_marker(confirmed_marker)
			[]
			set_confirmed_marker?x__ -> Memory_confirmed_marker(x__)
			[]
			terminate -> SKIP
		Memory_validate_database_b(validate_database_b) =
			get_validate_database_b!validate_database_b -> Memory_validate_database_b(validate_database_b)
			[]
			set_validate_database_b?x__ -> Memory_validate_database_b(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = Memory_attempts(0)
		[| { terminate } |] (
		Memory_validate_operation(true)
		[| { terminate } |] (
		Memory_found_marker(true)
		[| { terminate } |] (
		Memory_confirmed_marker(true)
		[| { terminate } |] (
		Memory_validate_database_b(true)
		)
		)
		)
		)
		
		getsetLocalChannels = {|get_attempts,set_attempts,get_validate_operation,set_validate_operation,get_found_marker,set_found_marker,get_confirmed_marker,set_confirmed_marker,get_validate_database_b,set_validate_database_b|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = STM_VS_O(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) \ localClockResets
		D__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = timed_priority(STM(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) \ union(internal_events,localClockResets))
		O__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = dbisim(D__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts))
		VS__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = FVS__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts)
		VS_O__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = dbisim(FVS__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts))
		HEXT__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = O__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) [|shared_variable_events|] SKIP
		FVS_C__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = dbisim(timed_priority(STM(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) \ internal_events))
		HUP__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = timed_priority(O__(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_MoveToSection(id__,x__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			TimeOut_1(
				MoveToSection::entered -> Clock_CLID_MoveToSection(id__,0,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				get_CLID_MoveToSection!x__ -> Clock_CLID_MoveToSection(id__,x__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				terminate -> SKIP,Clock_CLID_MoveToSection(id__,clock_type_plus(x__,1,CLID_MoveToSection_clock_type(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)),
						          const_location_medicine_LocationMedicineFSM_limit_attempts))
		Clock_CLID_MoveToPosRef(id__,x__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			TimeOut_1(
				MoveToPosRef::entered -> Clock_CLID_MoveToPosRef(id__,0,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				get_CLID_MoveToPosRef!x__ -> Clock_CLID_MoveToPosRef(id__,x__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				terminate -> SKIP,Clock_CLID_MoveToPosRef(id__,clock_type_plus(x__,1,CLID_MoveToPosRef_clock_type(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)),
						          const_location_medicine_LocationMedicineFSM_limit_attempts))
		Clock_CLID_FindMarker(id__,x__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			TimeOut_1(
				FindMarker::entered -> Clock_CLID_FindMarker(id__,0,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				get_CLID_FindMarker!x__ -> Clock_CLID_FindMarker(id__,x__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				terminate -> SKIP,Clock_CLID_FindMarker(id__,clock_type_plus(x__,1,CLID_FindMarker_clock_type(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)),
						          const_location_medicine_LocationMedicineFSM_limit_attempts))
		Clock_CLID_Fail(id__,x__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			TimeOut_1(
				Fail::entered -> Clock_CLID_Fail(id__,0,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				get_CLID_Fail!x__ -> Clock_CLID_Fail(id__,x__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				terminate -> SKIP,Clock_CLID_Fail(id__,clock_type_plus(x__,1,CLID_Fail_clock_type(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)),
						          const_location_medicine_LocationMedicineFSM_limit_attempts))
		Clock_CLID_ConfirmMarker(id__,x__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = 
			TimeOut_1(
				ConfirmMarker::entered -> Clock_CLID_ConfirmMarker(id__,0,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				get_CLID_ConfirmMarker!x__ -> Clock_CLID_ConfirmMarker(id__,x__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)
				[]
				terminate -> SKIP,Clock_CLID_ConfirmMarker(id__,clock_type_plus(x__,1,CLID_ConfirmMarker_clock_type(id__,
						          const_location_medicine_LocationMedicineFSM_limit_attempts)),
						          const_location_medicine_LocationMedicineFSM_limit_attempts))
		
		StateClocks(id__,
				          const_location_medicine_LocationMedicineFSM_limit_attempts) = dbisim(Clock_CLID_MoveToSection(id__,0,
				          const_location_medicine_LocationMedicineFSM_limit_attempts))
		[| { terminate } |] (
		dbisim(Clock_CLID_MoveToPosRef(id__,0,
				          const_location_medicine_LocationMedicineFSM_limit_attempts))
		[| { terminate } |] (
		dbisim(Clock_CLID_FindMarker(id__,0,
				          const_location_medicine_LocationMedicineFSM_limit_attempts))
		[| { terminate } |] (
		dbisim(Clock_CLID_Fail(id__,0,
				          const_location_medicine_LocationMedicineFSM_limit_attempts))
		[| { terminate } |] (
		dbisim(Clock_CLID_ConfirmMarker(id__,0,
				          const_location_medicine_LocationMedicineFSM_limit_attempts))
		)
		)
		)
		)
		
		stateClockSync = {|get_CLID_MoveToSection,MoveToSection::entered,get_CLID_MoveToPosRef,MoveToPosRef::entered,get_CLID_FindMarker,FindMarker::entered,get_CLID_Fail,Fail::entered,get_CLID_ConfirmMarker,ConfirmMarker::entered|}
		
		-- Shared memory
		-- Shared memory variables
		
		-- sharedVarMemory process
		sharedVarMemory(id__,
				    const_location_medicine_LocationMedicineFSM_limit_attempts) = terminate -> SKIP
		
		sharedVarSync = {||}
		
		sharedVarHide = {||}
		}
endmodule


endmodule
